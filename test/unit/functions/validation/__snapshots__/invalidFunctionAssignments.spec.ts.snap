// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Invalid function argument ({"definition": "/** @noSelf */ class AnonFuncNSMergedNoSelfClass { method(s: string): string { return s; } }
            namespace AnonFuncNSMergedNoSelfClass { export function nsFunc(s: string) { return s; } }", "value": "AnonFuncNSMergedNoSelfClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class AnonFunctionNestedInNoSelfClass {
            method() { return function(s: string) { return s; } }
        }
        const anonFunctionNestedInNoSelfClass = (new AnonFunctionNestedInNoSelfClass).method();", "value": "anonFunctionNestedInNoSelfClass"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 1`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 2`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace AnonMethodClassInNoSelfNs {
                export class MethodClass {
                    method(s: string): string { return s; }
                }
            }
            const anonMethodClassInNoSelfNs = new AnonMethodClassInNoSelfNs.MethodClass();", "value": "anonMethodClassInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(9,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace AnonMethodInterfaceInNoSelfNs {
                export interface MethodInterface {
                    method(s: string): string;
                }
            }
            const anonMethodInterfaceInNoSelfNs: AnonMethodInterfaceInNoSelfNs.MethodInterface = {
                method: function(s: string): string { return s; }
            };", "value": "anonMethodInterfaceInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(11,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelfInFile */ class NoSelfInFileFuncNestedInClass {
            method() { return function(s: string) { return s; } }
        }
        const noSelfInFileFuncNestedInClass = (new NoSelfInFileFuncNestedInClass).method();", "value": "noSelfInFileFuncNestedInClass"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelfInFile */ let noSelfInFileLambda: (s: string) => string = s => s;", "value": "noSelfInFileLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileFuncNs {
                export function noSelfInFileNsFunc(s: string) { return s; }
            }", "value": "NoSelfInFileFuncNs.noSelfInFileNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileLambdaNs {
                export let noSelfInFileNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfInFileLambdaNs.noSelfInFileNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class AnonFuncPropClass { anonFuncProp: (s: string) => string = s => s; }
            const anonFuncPropClass = new AnonFuncPropClass();", "value": "anonFuncPropClass.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class AnonMethodClass { anonMethod(s: string): string { return s; } }
            const anonMethodClass = new AnonMethodClass();", "value": "anonMethodClass.anonMethod"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class AnonMethodClassMergedNoSelfNS { method(s: string): string { return s; } }
            /** @noSelf */ namespace AnonMethodClassMergedNoSelfNS { export function nsFunc(s: string) { return s; } }
            const anonMethodClassMergedNoSelfNS = new AnonMethodClassMergedNoSelfNS();", "value": "anonMethodClassMergedNoSelfNS.method"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class AnonStaticFuncPropClass {
                static anonStaticFuncProp: (s: string) => string = s => s;
            }", "value": "AnonStaticFuncPropClass.anonStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class AnonStaticMethodClass { static anonStaticMethod(s: string): string { return s; } }", "value": "AnonStaticMethodClass.anonStaticMethod"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class FuncPropClass { funcProp: (this: any, s: string) => string = s => s; }
            const funcPropClass = new FuncPropClass();", "value": "funcPropClass.funcProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class MethodClass { method(this: any, s: string): string { return s; } }
            const methodClass = new MethodClass();", "value": "methodClass.method"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(8,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(8,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class StaticFuncPropClass {
                static staticFuncProp: (this: any, s: string) => string = s => s;
            }", "value": "StaticFuncPropClass.staticFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class StaticMethodClass {
                static staticMethod(this: any, s: string): string { return s; }
            }", "value": "StaticMethodClass.staticMethod"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "interface AnonFuncPropInterface { anonFuncProp: (s: string) => string; }
            const anonFuncPropInterface: AnonFuncPropInterface = { anonFuncProp: (s: string): string => s };", "value": "anonFuncPropInterface.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "interface AnonMethodInterface { anonMethod(s: string): string; }
            const anonMethodInterface: AnonMethodInterface = {
                anonMethod: function(this: any, s: string): string { return s; }
            };", "value": "anonMethodInterface.anonMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "interface FuncPropInterface { funcProp: (this: any, s: string) => string; }
            const funcPropInterface: FuncPropInterface = { funcProp: function(this: any, s: string) { return s; } };", "value": "funcPropInterface.funcProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "interface MethodInterface { method(this: any, s: string): string; }
            const methodInterface: MethodInterface = { method: function(this: any, s: string): string { return s; } }", "value": "methodInterface.method"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 1`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 2`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 1`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 2`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "let anonFunc: {(s: string): string} = function(s) { return s; };", "value": "anonFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "let anonLambda: (s: string) => string = s => s;", "value": "anonLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "let selfLambda: (this: any, s: string) => string = s => s;", "value": "selfLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "namespace FuncNestedNs {
                export namespace NestedNs { export function nestedNsFunc(s: string) { return s; } }
            }", "value": "FuncNestedNs.NestedNs.nestedNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "namespace FuncNs { export function nsFunc(s: string) { return s; } }", "value": "FuncNs.nsFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "namespace LambdaNestedNs {
                export namespace NestedNs { export let nestedNsLambda: (s: string) => string = s => s }
            }", "value": "LambdaNestedNs.NestedNs.nestedNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "namespace LambdaNs {
                export let nsLambda: (s: string) => string = s => s;
            }", "value": "LambdaNs.nsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"definition": "namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "SelfAnonFuncNSMergedNoSelfNS.nsFuncSelf"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"value": "(function(this: any, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"value": "(function(this: void, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"value": "(function(this: void, s) { return s; })"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"value": "function(this: any, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function argument ({"value": "function(this: void, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument ({"value": "function(this: void, s) { return s; }"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function argument with cast ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function argument with cast ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 2`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function argument with cast ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function argument with cast ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 2`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function argument with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function argument with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function argument with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 3`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function argument with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 4`] = `
"main.ts(4,23): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,23): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class AnonFuncNSMergedNoSelfClass { method(s: string): string { return s; } }
            namespace AnonFuncNSMergedNoSelfClass { export function nsFunc(s: string) { return s; } }", "value": "AnonFuncNSMergedNoSelfClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class AnonFunctionNestedInNoSelfClass {
            method() { return function(s: string) { return s; } }
        }
        const anonFunctionNestedInNoSelfClass = (new AnonFunctionNestedInNoSelfClass).method();", "value": "anonFunctionNestedInNoSelfClass"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 1`] = `"main.ts(10,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 2`] = `"main.ts(10,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace AnonMethodClassInNoSelfNs {
                export class MethodClass {
                    method(s: string): string { return s; }
                }
            }
            const anonMethodClassInNoSelfNs = new AnonMethodClassInNoSelfNs.MethodClass();", "value": "anonMethodClassInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(9,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace AnonMethodInterfaceInNoSelfNs {
                export interface MethodInterface {
                    method(s: string): string;
                }
            }
            const anonMethodInterfaceInNoSelfNs: AnonMethodInterfaceInNoSelfNs.MethodInterface = {
                method: function(s: string): string { return s; }
            };", "value": "anonMethodInterfaceInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(11,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelfInFile */ class NoSelfInFileFuncNestedInClass {
            method() { return function(s: string) { return s; } }
        }
        const noSelfInFileFuncNestedInClass = (new NoSelfInFileFuncNestedInClass).method();", "value": "noSelfInFileFuncNestedInClass"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelfInFile */ let noSelfInFileLambda: (s: string) => string = s => s;", "value": "noSelfInFileLambda"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileFuncNs {
                export function noSelfInFileNsFunc(s: string) { return s; }
            }", "value": "NoSelfInFileFuncNs.noSelfInFileNsFunc"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileLambdaNs {
                export let noSelfInFileNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfInFileLambdaNs.noSelfInFileNsLambda"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class AnonFuncPropClass { anonFuncProp: (s: string) => string = s => s; }
            const anonFuncPropClass = new AnonFuncPropClass();", "value": "anonFuncPropClass.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class AnonMethodClass { anonMethod(s: string): string { return s; } }
            const anonMethodClass = new AnonMethodClass();", "value": "anonMethodClass.anonMethod"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class AnonMethodClassMergedNoSelfNS { method(s: string): string { return s; } }
            /** @noSelf */ namespace AnonMethodClassMergedNoSelfNS { export function nsFunc(s: string) { return s; } }
            const anonMethodClassMergedNoSelfNS = new AnonMethodClassMergedNoSelfNS();", "value": "anonMethodClassMergedNoSelfNS.method"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class AnonStaticFuncPropClass {
                static anonStaticFuncProp: (s: string) => string = s => s;
            }", "value": "AnonStaticFuncPropClass.anonStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class AnonStaticMethodClass { static anonStaticMethod(s: string): string { return s; } }", "value": "AnonStaticMethodClass.anonStaticMethod"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class FuncPropClass { funcProp: (this: any, s: string) => string = s => s; }
            const funcPropClass = new FuncPropClass();", "value": "funcPropClass.funcProp"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class MethodClass { method(this: any, s: string): string { return s; } }
            const methodClass = new MethodClass();", "value": "methodClass.method"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 2`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(8,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(8,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class StaticFuncPropClass {
                static staticFuncProp: (this: any, s: string) => string = s => s;
            }", "value": "StaticFuncPropClass.staticFuncProp"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class StaticMethodClass {
                static staticMethod(this: any, s: string): string { return s; }
            }", "value": "StaticMethodClass.staticMethod"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 2`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 2`] = `"main.ts(7,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "interface AnonFuncPropInterface { anonFuncProp: (s: string) => string; }
            const anonFuncPropInterface: AnonFuncPropInterface = { anonFuncProp: (s: string): string => s };", "value": "anonFuncPropInterface.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "interface AnonMethodInterface { anonMethod(s: string): string; }
            const anonMethodInterface: AnonMethodInterface = {
                anonMethod: function(this: any, s: string): string { return s; }
            };", "value": "anonMethodInterface.anonMethod"}): diagnostics 1`] = `"main.ts(7,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "interface FuncPropInterface { funcProp: (this: any, s: string) => string; }
            const funcPropInterface: FuncPropInterface = { funcProp: function(this: any, s: string) { return s; } };", "value": "funcPropInterface.funcProp"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "interface MethodInterface { method(this: any, s: string): string; }
            const methodInterface: MethodInterface = { method: function(this: any, s: string): string { return s; } }", "value": "methodInterface.method"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(10,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(10,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 1`] = `"main.ts(9,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 2`] = `"main.ts(9,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 1`] = `"main.ts(9,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 2`] = `"main.ts(9,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "let anonFunc: {(s: string): string} = function(s) { return s; };", "value": "anonFunc"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "let anonLambda: (s: string) => string = s => s;", "value": "anonLambda"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "let selfLambda: (this: any, s: string) => string = s => s;", "value": "selfLambda"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 2`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "namespace FuncNestedNs {
                export namespace NestedNs { export function nestedNsFunc(s: string) { return s; } }
            }", "value": "FuncNestedNs.NestedNs.nestedNsFunc"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "namespace FuncNs { export function nsFunc(s: string) { return s; } }", "value": "FuncNs.nsFunc"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "namespace LambdaNestedNs {
                export namespace NestedNs { export let nestedNsLambda: (s: string) => string = s => s }
            }", "value": "LambdaNestedNs.NestedNs.nestedNsLambda"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "namespace LambdaNs {
                export let nsLambda: (s: string) => string = s => s;
            }", "value": "LambdaNs.nsLambda"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 2`] = `"main.ts(5,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(6,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"definition": "namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "SelfAnonFuncNSMergedNoSelfNS.nsFuncSelf"}): diagnostics 1`] = `"main.ts(5,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"value": "(function(this: any, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"value": "(function(this: void, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"value": "(function(this: void, s) { return s; })"}): diagnostics 2`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"value": "function(this: any, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function assignment ({"value": "function(this: void, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment ({"value": "function(this: void, s) { return s; }"}): diagnostics 2`] = `"main.ts(4,18): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function assignment with cast ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment with cast ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 2`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment with cast ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment with cast ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 2`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 3`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function assignment with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 4`] = `
"main.ts(4,14): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,14): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class AnonFuncNSMergedNoSelfClass { method(s: string): string { return s; } }
            namespace AnonFuncNSMergedNoSelfClass { export function nsFunc(s: string) { return s; } }", "value": "AnonFuncNSMergedNoSelfClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class AnonFunctionNestedInNoSelfClass {
            method() { return function(s: string) { return s; } }
        }
        const anonFunctionNestedInNoSelfClass = (new AnonFunctionNestedInNoSelfClass).method();", "value": "anonFunctionNestedInNoSelfClass"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 1`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 2`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace AnonMethodClassInNoSelfNs {
                export class MethodClass {
                    method(s: string): string { return s; }
                }
            }
            const anonMethodClassInNoSelfNs = new AnonMethodClassInNoSelfNs.MethodClass();", "value": "anonMethodClassInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(9,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace AnonMethodInterfaceInNoSelfNs {
                export interface MethodInterface {
                    method(s: string): string;
                }
            }
            const anonMethodInterfaceInNoSelfNs: AnonMethodInterfaceInNoSelfNs.MethodInterface = {
                method: function(s: string): string { return s; }
            };", "value": "anonMethodInterfaceInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(11,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelfInFile */ class NoSelfInFileFuncNestedInClass {
            method() { return function(s: string) { return s; } }
        }
        const noSelfInFileFuncNestedInClass = (new NoSelfInFileFuncNestedInClass).method();", "value": "noSelfInFileFuncNestedInClass"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelfInFile */ let noSelfInFileLambda: (s: string) => string = s => s;", "value": "noSelfInFileLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileFuncNs {
                export function noSelfInFileNsFunc(s: string) { return s; }
            }", "value": "NoSelfInFileFuncNs.noSelfInFileNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileLambdaNs {
                export let noSelfInFileNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfInFileLambdaNs.noSelfInFileNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class AnonFuncPropClass { anonFuncProp: (s: string) => string = s => s; }
            const anonFuncPropClass = new AnonFuncPropClass();", "value": "anonFuncPropClass.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class AnonMethodClass { anonMethod(s: string): string { return s; } }
            const anonMethodClass = new AnonMethodClass();", "value": "anonMethodClass.anonMethod"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class AnonMethodClassMergedNoSelfNS { method(s: string): string { return s; } }
            /** @noSelf */ namespace AnonMethodClassMergedNoSelfNS { export function nsFunc(s: string) { return s; } }
            const anonMethodClassMergedNoSelfNS = new AnonMethodClassMergedNoSelfNS();", "value": "anonMethodClassMergedNoSelfNS.method"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class AnonStaticFuncPropClass {
                static anonStaticFuncProp: (s: string) => string = s => s;
            }", "value": "AnonStaticFuncPropClass.anonStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class AnonStaticMethodClass { static anonStaticMethod(s: string): string { return s; } }", "value": "AnonStaticMethodClass.anonStaticMethod"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class FuncPropClass { funcProp: (this: any, s: string) => string = s => s; }
            const funcPropClass = new FuncPropClass();", "value": "funcPropClass.funcProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class MethodClass { method(this: any, s: string): string { return s; } }
            const methodClass = new MethodClass();", "value": "methodClass.method"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(8,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(8,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class StaticFuncPropClass {
                static staticFuncProp: (this: any, s: string) => string = s => s;
            }", "value": "StaticFuncPropClass.staticFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class StaticMethodClass {
                static staticMethod(this: any, s: string): string { return s; }
            }", "value": "StaticMethodClass.staticMethod"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 2`] = `"main.ts(7,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "interface AnonFuncPropInterface { anonFuncProp: (s: string) => string; }
            const anonFuncPropInterface: AnonFuncPropInterface = { anonFuncProp: (s: string): string => s };", "value": "anonFuncPropInterface.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "interface AnonMethodInterface { anonMethod(s: string): string; }
            const anonMethodInterface: AnonMethodInterface = {
                anonMethod: function(this: any, s: string): string { return s; }
            };", "value": "anonMethodInterface.anonMethod"}): diagnostics 1`] = `"main.ts(7,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "interface FuncPropInterface { funcProp: (this: any, s: string) => string; }
            const funcPropInterface: FuncPropInterface = { funcProp: function(this: any, s: string) { return s; } };", "value": "funcPropInterface.funcProp"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "interface MethodInterface { method(this: any, s: string): string; }
            const methodInterface: MethodInterface = { method: function(this: any, s: string): string { return s; } }", "value": "methodInterface.method"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(10,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 1`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 2`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 1`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 2`] = `"main.ts(9,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "let anonFunc: {(s: string): string} = function(s) { return s; };", "value": "anonFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "let anonLambda: (s: string) => string = s => s;", "value": "anonLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "let selfLambda: (this: any, s: string) => string = s => s;", "value": "selfLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "namespace FuncNestedNs {
                export namespace NestedNs { export function nestedNsFunc(s: string) { return s; } }
            }", "value": "FuncNestedNs.NestedNs.nestedNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "namespace FuncNs { export function nsFunc(s: string) { return s; } }", "value": "FuncNs.nsFunc"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "namespace LambdaNestedNs {
                export namespace NestedNs { export let nestedNsLambda: (s: string) => string = s => s }
            }", "value": "LambdaNestedNs.NestedNs.nestedNsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "namespace LambdaNs {
                export let nsLambda: (s: string) => string = s => s;
            }", "value": "LambdaNs.nsLambda"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 2`] = `"main.ts(5,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(6,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"definition": "namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "SelfAnonFuncNSMergedNoSelfNS.nsFuncSelf"}): diagnostics 1`] = `"main.ts(5,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"value": "(function(this: any, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"value": "(function(this: void, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"value": "(function(this: void, s) { return s; })"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"value": "function(this: any, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function generic argument ({"value": "function(this: void, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function generic argument ({"value": "function(this: void, s) { return s; }"}): diagnostics 2`] = `"main.ts(4,27): error TSTL: Unable to convert function with no 'this' parameter to function 'fn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function overload assignment ("(this: void, s: string) => string"): diagnostics 1`] = `"main.ts(7,52): error TSTL: Unsupported assignment of function with different overloaded types for 'this'. Overloads should all have the same type for 'this'."`;

exports[`Invalid function overload assignment ("(this: void, s1: string, s2: string) => string"): diagnostics 1`] = `"main.ts(7,65): error TSTL: Unsupported assignment of function with different overloaded types for 'this'. Overloads should all have the same type for 'this'."`;

exports[`Invalid function overload assignment ("{(this: any, s1: string, s2: string): string}"): diagnostics 1`] = `"main.ts(7,64): error TSTL: Unsupported assignment of function with different overloaded types for 'this'. Overloads should all have the same type for 'this'."`;

exports[`Invalid function overload assignment ("{(this: void, s: string): string}"): diagnostics 1`] = `"main.ts(7,52): error TSTL: Unsupported assignment of function with different overloaded types for 'this'. Overloads should all have the same type for 'this'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class AnonFuncNSMergedNoSelfClass { method(s: string): string { return s; } }
            namespace AnonFuncNSMergedNoSelfClass { export function nsFunc(s: string) { return s; } }", "value": "AnonFuncNSMergedNoSelfClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class AnonFunctionNestedInNoSelfClass {
            method() { return function(s: string) { return s; } }
        }
        const anonFunctionNestedInNoSelfClass = (new AnonFunctionNestedInNoSelfClass).method();", "value": "anonFunctionNestedInNoSelfClass"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 1`] = `"main.ts(10,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 2`] = `"main.ts(10,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace AnonMethodClassInNoSelfNs {
                export class MethodClass {
                    method(s: string): string { return s; }
                }
            }
            const anonMethodClassInNoSelfNs = new AnonMethodClassInNoSelfNs.MethodClass();", "value": "anonMethodClassInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(9,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace AnonMethodInterfaceInNoSelfNs {
                export interface MethodInterface {
                    method(s: string): string;
                }
            }
            const anonMethodInterfaceInNoSelfNs: AnonMethodInterfaceInNoSelfNs.MethodInterface = {
                method: function(s: string): string { return s; }
            };", "value": "anonMethodInterfaceInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(11,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelfInFile */ class NoSelfInFileFuncNestedInClass {
            method() { return function(s: string) { return s; } }
        }
        const noSelfInFileFuncNestedInClass = (new NoSelfInFileFuncNestedInClass).method();", "value": "noSelfInFileFuncNestedInClass"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelfInFile */ let noSelfInFileLambda: (s: string) => string = s => s;", "value": "noSelfInFileLambda"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileFuncNs {
                export function noSelfInFileNsFunc(s: string) { return s; }
            }", "value": "NoSelfInFileFuncNs.noSelfInFileNsFunc"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileLambdaNs {
                export let noSelfInFileNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfInFileLambdaNs.noSelfInFileNsLambda"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class AnonFuncPropClass { anonFuncProp: (s: string) => string = s => s; }
            const anonFuncPropClass = new AnonFuncPropClass();", "value": "anonFuncPropClass.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class AnonMethodClass { anonMethod(s: string): string { return s; } }
            const anonMethodClass = new AnonMethodClass();", "value": "anonMethodClass.anonMethod"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class AnonMethodClassMergedNoSelfNS { method(s: string): string { return s; } }
            /** @noSelf */ namespace AnonMethodClassMergedNoSelfNS { export function nsFunc(s: string) { return s; } }
            const anonMethodClassMergedNoSelfNS = new AnonMethodClassMergedNoSelfNS();", "value": "anonMethodClassMergedNoSelfNS.method"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class AnonStaticFuncPropClass {
                static anonStaticFuncProp: (s: string) => string = s => s;
            }", "value": "AnonStaticFuncPropClass.anonStaticFuncProp"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class AnonStaticMethodClass { static anonStaticMethod(s: string): string { return s; } }", "value": "AnonStaticMethodClass.anonStaticMethod"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class FuncPropClass { funcProp: (this: any, s: string) => string = s => s; }
            const funcPropClass = new FuncPropClass();", "value": "funcPropClass.funcProp"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class MethodClass { method(this: any, s: string): string { return s; } }
            const methodClass = new MethodClass();", "value": "methodClass.method"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 2`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(8,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(8,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class StaticFuncPropClass {
                static staticFuncProp: (this: any, s: string) => string = s => s;
            }", "value": "StaticFuncPropClass.staticFuncProp"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class StaticMethodClass {
                static staticMethod(this: any, s: string): string { return s; }
            }", "value": "StaticMethodClass.staticMethod"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 2`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 2`] = `"main.ts(7,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "interface AnonFuncPropInterface { anonFuncProp: (s: string) => string; }
            const anonFuncPropInterface: AnonFuncPropInterface = { anonFuncProp: (s: string): string => s };", "value": "anonFuncPropInterface.anonFuncProp"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "interface AnonMethodInterface { anonMethod(s: string): string; }
            const anonMethodInterface: AnonMethodInterface = {
                anonMethod: function(this: any, s: string): string { return s; }
            };", "value": "anonMethodInterface.anonMethod"}): diagnostics 1`] = `"main.ts(7,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "interface FuncPropInterface { funcProp: (this: any, s: string) => string; }
            const funcPropInterface: FuncPropInterface = { funcProp: function(this: any, s: string) { return s; } };", "value": "funcPropInterface.funcProp"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "interface MethodInterface { method(this: any, s: string): string; }
            const methodInterface: MethodInterface = { method: function(this: any, s: string): string { return s; } }", "value": "methodInterface.method"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(10,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(10,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 1`] = `"main.ts(9,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 2`] = `"main.ts(9,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 1`] = `"main.ts(9,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 2`] = `"main.ts(9,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "let anonFunc: {(s: string): string} = function(s) { return s; };", "value": "anonFunc"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "let anonLambda: (s: string) => string = s => s;", "value": "anonLambda"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "let selfLambda: (this: any, s: string) => string = s => s;", "value": "selfLambda"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 2`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "namespace FuncNestedNs {
                export namespace NestedNs { export function nestedNsFunc(s: string) { return s; } }
            }", "value": "FuncNestedNs.NestedNs.nestedNsFunc"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "namespace FuncNs { export function nsFunc(s: string) { return s; } }", "value": "FuncNs.nsFunc"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "namespace LambdaNestedNs {
                export namespace NestedNs { export let nestedNsLambda: (s: string) => string = s => s }
            }", "value": "LambdaNestedNs.NestedNs.nestedNsLambda"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "namespace LambdaNs {
                export let nsLambda: (s: string) => string = s => s;
            }", "value": "LambdaNs.nsLambda"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 2`] = `"main.ts(5,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(6,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"definition": "namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "SelfAnonFuncNSMergedNoSelfNS.nsFuncSelf"}): diagnostics 1`] = `"main.ts(5,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"value": "(function(this: any, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"value": "(function(this: void, s) { return s; })"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"value": "(function(this: void, s) { return s; })"}): diagnostics 2`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"value": "function(this: any, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function return ({"value": "function(this: void, s) { return s; }"}): diagnostics 1`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return ({"value": "function(this: void, s) { return s; }"}): diagnostics 2`] = `"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function return with cast ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `
"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,24): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function return with cast ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 2`] = `
"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,24): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function return with cast ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `
"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'.
main.ts(4,24): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."
`;

exports[`Invalid function return with cast ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 2`] = `
"main.ts(4,17): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'.
main.ts(4,24): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."
`;

exports[`Invalid function return with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `
"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,24): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function return with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `
"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,24): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function return with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 3`] = `
"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,24): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function return with cast ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 4`] = `
"main.ts(4,17): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'.
main.ts(4,24): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."
`;

exports[`Invalid function tuple assignment: diagnostics 1`] = `
"main.ts(5,13): error TS2322: Type '[number, Meth]' is not assignable to type '[number, Func]'.
  Type 'Meth' is not assignable to type 'Func'.
    The 'this' types of each signature are incompatible.
      Type 'void' is not assignable to type '{}'.
main.ts(5,38): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."
`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class AnonFuncNSMergedNoSelfClass { method(s: string): string { return s; } }
            namespace AnonFuncNSMergedNoSelfClass { export function nsFunc(s: string) { return s; } }", "value": "AnonFuncNSMergedNoSelfClass.nsFunc"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class AnonFunctionNestedInNoSelfClass {
            method() { return function(s: string) { return s; } }
        }
        const anonFunctionNestedInNoSelfClass = (new AnonFunctionNestedInNoSelfClass).method();", "value": "anonFunctionNestedInNoSelfClass"}): diagnostics 1`] = `"main.ts(6,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfAnonMethodClassMergedNS { method(s: string): string { return s; } }
            namespace NoSelfAnonMethodClassMergedNS { export function nsFunc(s: string) { return s; } }
            const noSelfAnonMethodClassMergedNS = new NoSelfAnonMethodClassMergedNS();", "value": "noSelfAnonMethodClassMergedNS.method"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(4,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfFuncPropClass { noSelfFuncProp: (s: string) => string = s => s; }
            const noSelfFuncPropClass = new NoSelfFuncPropClass();", "value": "noSelfFuncPropClass.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(4,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(4,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfMethodClass { noSelfMethod(s: string): string { return s; } }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(4,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfStaticFuncPropClass {
                static noSelfStaticFuncProp: (s: string) => string  = s => s;
            }", "value": "NoSelfStaticFuncPropClass.noSelfStaticFuncProp"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ class NoSelfStaticMethodClass {
                static noSelfStaticMethod(s: string): string { return s; }
            }", "value": "NoSelfStaticMethodClass.noSelfStaticMethod"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 1`] = `"main.ts(6,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ const NoSelfMethodClassExpression = class {
                noSelfMethod(s: string): string { return s; }
            }
            const noSelfMethodClassExpression = new NoSelfMethodClassExpression();", "value": "noSelfMethodClassExpression.noSelfMethod"}): diagnostics 2`] = `"main.ts(6,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 1`] = `"main.ts(6,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ interface NoSelfFuncPropInterface { noSelfFuncProp(s: string): string; }
            const noSelfFuncPropInterface: NoSelfFuncPropInterface = {
                noSelfFuncProp: (s: string): string => s
            };", "value": "noSelfFuncPropInterface.noSelfFuncProp"}): diagnostics 2`] = `"main.ts(6,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(6,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ interface NoSelfMethodInterface { noSelfMethod(s: string): string; }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(6,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 1`] = `"main.ts(9,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace AnonFunctionNestedInClassInNoSelfNs {
            export class AnonFunctionNestedInClass {
                method() { return function(s: string) { return s; } }
            }
        }
        const anonFunctionNestedInClassInNoSelfNs =
            (new AnonFunctionNestedInClassInNoSelfNs.AnonFunctionNestedInClass).method();", "value": "anonFunctionNestedInClassInNoSelfNs"}): diagnostics 2`] = `"main.ts(9,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace AnonMethodClassInNoSelfNs {
                export class MethodClass {
                    method(s: string): string { return s; }
                }
            }
            const anonMethodClassInNoSelfNs = new AnonMethodClassInNoSelfNs.MethodClass();", "value": "anonMethodClassInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(8,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace AnonMethodInterfaceInNoSelfNs {
                export interface MethodInterface {
                    method(s: string): string;
                }
            }
            const anonMethodInterfaceInNoSelfNs: AnonMethodInterfaceInNoSelfNs.MethodInterface = {
                method: function(s: string): string { return s; }
            };", "value": "anonMethodInterfaceInNoSelfNs.method"}): diagnostics 1`] = `"main.ts(10,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfFuncNestedNs {
                export namespace NestedNs { export function noSelfNestedNsFunc(s: string) { return s; } }
            }", "value": "NoSelfFuncNestedNs.NestedNs.noSelfNestedNsFunc"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(3,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfFuncNs { export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(3,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfLambdaNestedNs {
                export namespace NestedNs { export let noSelfNestedNsLambda: (s: string) => string = s => s }
            }", "value": "NoSelfLambdaNestedNs.NestedNs.noSelfNestedNsLambda"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelf */ namespace NoSelfLambdaNs {
                export let noSelfNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfLambdaNs.noSelfNsLambda"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelfInFile */ class NoSelfInFileFuncNestedInClass {
            method() { return function(s: string) { return s; } }
        }
        const noSelfInFileFuncNestedInClass = (new NoSelfInFileFuncNestedInClass).method();", "value": "noSelfInFileFuncNestedInClass"}): diagnostics 1`] = `"main.ts(6,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelfInFile */ let noSelfInFileFunc: {(s: string): string} = function(s) { return s; };", "value": "noSelfInFileFunc"}): diagnostics 1`] = `"main.ts(3,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelfInFile */ let noSelfInFileLambda: (s: string) => string = s => s;", "value": "noSelfInFileLambda"}): diagnostics 1`] = `"main.ts(3,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileFuncNs {
                export function noSelfInFileNsFunc(s: string) { return s; }
            }", "value": "NoSelfInFileFuncNs.noSelfInFileNsFunc"}): diagnostics 1`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "/** @noSelfInFile */ namespace NoSelfInFileLambdaNs {
                export let noSelfInFileNsLambda: (s: string) => string = s => s;
            }", "value": "NoSelfInFileLambdaNs.noSelfInFileNsLambda"}): diagnostics 1`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class AnonFuncPropClass { anonFuncProp: (s: string) => string = s => s; }
            const anonFuncPropClass = new AnonFuncPropClass();", "value": "anonFuncPropClass.anonFuncProp"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class AnonMethodClass { anonMethod(s: string): string { return s; } }
            const anonMethodClass = new AnonMethodClass();", "value": "anonMethodClass.anonMethod"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class AnonMethodClassMergedNoSelfNS { method(s: string): string { return s; } }
            /** @noSelf */ namespace AnonMethodClassMergedNoSelfNS { export function nsFunc(s: string) { return s; } }
            const anonMethodClassMergedNoSelfNS = new AnonMethodClassMergedNoSelfNS();", "value": "anonMethodClassMergedNoSelfNS.method"}): diagnostics 1`] = `"main.ts(5,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class AnonStaticFuncPropClass {
                static anonStaticFuncProp: (s: string) => string = s => s;
            }", "value": "AnonStaticFuncPropClass.anonStaticFuncProp"}): diagnostics 1`] = `"main.ts(5,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class AnonStaticMethodClass { static anonStaticMethod(s: string): string { return s; } }", "value": "AnonStaticMethodClass.anonStaticMethod"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class FuncPropClass { funcProp: (this: any, s: string) => string = s => s; }
            const funcPropClass = new FuncPropClass();", "value": "funcPropClass.funcProp"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class MethodClass { method(this: any, s: string): string { return s; } }
            const methodClass = new MethodClass();", "value": "methodClass.method"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 1`] = `"main.ts(4,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class NoSelfAnonFuncNSMergedClass { method(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedClass { export function nsFunc(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedClass.nsFunc"}): diagnostics 2`] = `"main.ts(4,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 1`] = `"main.ts(7,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class NoSelfMethodClass { 
                /** @noSelf */
                noSelfMethod(s: string): string { return s; } 
            }
            const noSelfMethodClass = new NoSelfMethodClass();", "value": "noSelfMethodClass.noSelfMethod"}): diagnostics 2`] = `"main.ts(7,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class StaticFuncPropClass {
                static staticFuncProp: (this: any, s: string) => string = s => s;
            }", "value": "StaticFuncPropClass.staticFuncProp"}): diagnostics 1`] = `"main.ts(5,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class StaticMethodClass {
                static staticMethod(this: any, s: string): string { return s; }
            }", "value": "StaticMethodClass.staticMethod"}): diagnostics 1`] = `"main.ts(5,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class StaticVoidFuncPropClass {
                static staticVoidFuncProp: (this: void, s: string) => string = s => s;
            }", "value": "StaticVoidFuncPropClass.staticVoidFuncProp"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class StaticVoidMethodClass {
                static staticVoidMethod(this: void, s: string): string { return s; }
            }", "value": "StaticVoidMethodClass.staticVoidMethod"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 1`] = `"main.ts(6,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class VoidFuncPropClass {
                voidFuncProp: (this: void, s: string) => string = s => s;
            }
            const voidFuncPropClass = new VoidFuncPropClass();", "value": "voidFuncPropClass.voidFuncProp"}): diagnostics 2`] = `"main.ts(6,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 1`] = `"main.ts(6,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "class VoidMethodClass {
                voidMethod(this: void, s: string): string { return s; }
            }
            const voidMethodClass = new VoidMethodClass();", "value": "voidMethodClass.voidMethod"}): diagnostics 2`] = `"main.ts(6,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "interface AnonFuncPropInterface { anonFuncProp: (s: string) => string; }
            const anonFuncPropInterface: AnonFuncPropInterface = { anonFuncProp: (s: string): string => s };", "value": "anonFuncPropInterface.anonFuncProp"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "interface AnonMethodInterface { anonMethod(s: string): string; }
            const anonMethodInterface: AnonMethodInterface = {
                anonMethod: function(this: any, s: string): string { return s; }
            };", "value": "anonMethodInterface.anonMethod"}): diagnostics 1`] = `"main.ts(6,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "interface FuncPropInterface { funcProp: (this: any, s: string) => string; }
            const funcPropInterface: FuncPropInterface = { funcProp: function(this: any, s: string) { return s; } };", "value": "funcPropInterface.funcProp"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "interface MethodInterface { method(this: any, s: string): string; }
            const methodInterface: MethodInterface = { method: function(this: any, s: string): string { return s; } }", "value": "methodInterface.method"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 1`] = `"main.ts(9,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "interface NoSelfMethodInterface { 
                /** @noSelf */ 
                noSelfMethod(s: string): string;
            }
            const noSelfMethodInterface: NoSelfMethodInterface = {
                noSelfMethod: function(s: string): string { return s; }
            };", "value": "noSelfMethodInterface.noSelfMethod"}): diagnostics 2`] = `"main.ts(9,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 1`] = `"main.ts(8,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "interface VoidFuncPropInterface {
                voidFuncProp: (this: void, s: string) => string;
            }
            const voidFuncPropInterface: VoidFuncPropInterface = {
                voidFuncProp: function(this: void, s: string): string { return s; }
            };", "value": "voidFuncPropInterface.voidFuncProp"}): diagnostics 2`] = `"main.ts(8,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 1`] = `"main.ts(8,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "interface VoidMethodInterface {
                voidMethod(this: void, s: string): string;
            }
            const voidMethodInterface: VoidMethodInterface = {
                voidMethod(this: void, s: string): string { return s; }
            };", "value": "voidMethodInterface.voidMethod"}): diagnostics 2`] = `"main.ts(8,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "let anonFunc: {(s: string): string} = function(s) { return s; };", "value": "anonFunc"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "let anonLambda: (s: string) => string = s => s;", "value": "anonLambda"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "let selfFunc: {(this: any, s: string): string} = function(s) { return s; };", "value": "selfFunc"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "let selfLambda: (this: any, s: string) => string = s => s;", "value": "selfLambda"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 1`] = `"main.ts(3,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "let voidFunc: {(this: void, s: string): string} = function(s) { return s; };", "value": "voidFunc"}): diagnostics 2`] = `"main.ts(3,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 1`] = `"main.ts(3,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "let voidLambda: (this: void, s: string) => string = s => s;", "value": "voidLambda"}): diagnostics 2`] = `"main.ts(3,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "namespace FuncNestedNs {
                export namespace NestedNs { export function nestedNsFunc(s: string) { return s; } }
            }", "value": "FuncNestedNs.NestedNs.nestedNsFunc"}): diagnostics 1`] = `"main.ts(5,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "namespace FuncNs { export function nsFunc(s: string) { return s; } }", "value": "FuncNs.nsFunc"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "namespace LambdaNestedNs {
                export namespace NestedNs { export let nestedNsLambda: (s: string) => string = s => s }
            }", "value": "LambdaNestedNs.NestedNs.nestedNsLambda"}): diagnostics 1`] = `"main.ts(5,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "namespace LambdaNs {
                export let nsLambda: (s: string) => string = s => s;
            }", "value": "LambdaNs.nsLambda"}): diagnostics 1`] = `"main.ts(5,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 1`] = `"main.ts(4,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace NoSelfAnonFuncNSMergedSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "NoSelfAnonFuncNSMergedSelfNS.nsFuncNoSelf"}): diagnostics 2`] = `"main.ts(4,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 1`] = `"main.ts(5,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "namespace NoSelfFuncNs {
            /** @noSelf */
            export function noSelfNsFunc(s: string) { return s; } }", "value": "NoSelfFuncNs.noSelfNsFunc"}): diagnostics 2`] = `"main.ts(5,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"definition": "namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncSelf(s: string): string { return s; } }
        /** @noSelf */ namespace SelfAnonFuncNSMergedNoSelfNS { export function nsFuncNoSelf(s: string) { return s; } }", "value": "SelfAnonFuncNSMergedNoSelfNS.nsFuncSelf"}): diagnostics 1`] = `"main.ts(4,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"value": "(function(this: any, s) { return s; })"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"value": "(function(this: void, s) { return s; })"}): diagnostics 1`] = `"main.ts(3,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"value": "(function(this: void, s) { return s; })"}): diagnostics 2`] = `"main.ts(3,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"value": "function(this: any, s) { return s; }"}): diagnostics 1`] = `"main.ts(3,59): error TSTL: Unable to convert function with a 'this' parameter to function with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid function variable declaration ({"value": "function(this: void, s) { return s; }"}): diagnostics 1`] = `"main.ts(3,47): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid function variable declaration ({"value": "function(this: void, s) { return s; }"}): diagnostics 2`] = `"main.ts(3,58): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid interface method assignment: diagnostics 1`] = `"main.ts(5,22): error TSTL: Unable to convert function with a 'this' parameter to function 'fn' with no 'this'. To fix, wrap in an arrow function, or declare with 'this: void'."`;

exports[`Invalid lua lib function argument: diagnostics 1`] = `"main.ts(4,19): error TSTL: Unable to convert function with no 'this' parameter to function 'callbackfn' with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;

exports[`Invalid method tuple assignment: diagnostics 1`] = `"main.ts(5,38): error TSTL: Unable to convert function with no 'this' parameter to function with 'this'. To fix, wrap in an arrow function, or declare with 'this: any'."`;
