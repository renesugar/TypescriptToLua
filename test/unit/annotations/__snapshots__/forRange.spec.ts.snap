// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`invalid usage argument count ([]): code 1`] = `
"for i = 0, 0 do
end"
`;

exports[`invalid usage argument count ([]): diagnostics 1`] = `"main.ts(6,29): error TSTL: Invalid @forRange call: Expected 2-3 arguments, but got 0."`;

exports[`invalid usage argument count ([1, 2, 3, 4]): code 1`] = `
"for i = 1, 2, 3 do
end"
`;

exports[`invalid usage argument count ([1, 2, 3, 4]): diagnostics 1`] = `"main.ts(6,29): error TSTL: Invalid @forRange call: Expected 2-3 arguments, but got 4."`;

exports[`invalid usage argument count ([1]): code 1`] = `
"for i = 1, 0 do
end"
`;

exports[`invalid usage argument count ([1]): diagnostics 1`] = `"main.ts(6,29): error TSTL: Invalid @forRange call: Expected 2-3 arguments, but got 1."`;

exports[`invalid usage argument types: code 1`] = `
"for i = \\"foo\\", 2 do
end"
`;

exports[`invalid usage argument types: diagnostics 1`] = `"main.ts(6,29): error TSTL: Invalid @forRange call: arguments must be numbers."`;

exports[`invalid usage non-ambient declaration: code 1`] = `
"function luaRange(self)
end"
`;

exports[`invalid usage non-ambient declaration: diagnostics 1`] = `"main.ts(3,22): error TSTL: Invalid @forRange call: can be used only as an iterable in a for...of loop."`;

exports[`invalid usage non-declared loop variable: code 1`] = `
"for ____ = 1, 10, 2 do
end"
`;

exports[`invalid usage non-declared loop variable: diagnostics 1`] = `"main.ts(7,18): error TSTL: Invalid @forRange call: loop must declare it's own control variable."`;

exports[`invalid usage reference ("const call = undefined as any; call(luaRange);"): code 1`] = `
"call = nil
call(_G, luaRange)"
`;

exports[`invalid usage reference ("const call = undefined as any; call(luaRange);"): diagnostics 1`] = `"main.ts(6,49): error TSTL: Invalid @forRange call: can be used only as an iterable in a for...of loop."`;

exports[`invalid usage reference ("const range = luaRange(1, 10);"): code 1`] = `"range = luaRange(_G, 1, 10)"`;

exports[`invalid usage reference ("const range = luaRange(1, 10);"): diagnostics 1`] = `"main.ts(6,27): error TSTL: Invalid @forRange call: can be used only as an iterable in a for...of loop."`;

exports[`invalid usage reference ("for (const i of [...luaRange(1, 10)]) {}"): code 1`] = `
"for ____, i in ipairs(
    {
        table.unpack(
            luaRange(_G, 1, 10)
        )
    }
) do
end"
`;

exports[`invalid usage reference ("for (const i of [...luaRange(1, 10)]) {}"): diagnostics 1`] = `"main.ts(6,33): error TSTL: Invalid @forRange call: can be used only as an iterable in a for...of loop."`;

exports[`invalid usage reference ("let array = [0, luaRange, 1];"): code 1`] = `"array = {0, luaRange, 1}"`;

exports[`invalid usage reference ("let array = [0, luaRange, 1];"): diagnostics 1`] = `"main.ts(6,29): error TSTL: Invalid @forRange call: can be used only as an iterable in a for...of loop."`;

exports[`invalid usage reference ("luaRange.call(null, 0, 0, 0);"): code 1`] = `"luaRange(nil, 0, 0, 0)"`;

exports[`invalid usage reference ("luaRange.call(null, 0, 0, 0);"): diagnostics 1`] = `"main.ts(6,13): error TSTL: Invalid @forRange call: can be used only as an iterable in a for...of loop."`;

exports[`invalid usage return type: code 1`] = `
"for i = 1, 10 do
end"
`;

exports[`invalid usage return type: diagnostics 1`] = `"main.ts(6,29): error TSTL: Invalid @forRange call: function must return Iterable<number>."`;

exports[`invalid usage variable destructuring: code 1`] = `
"for ____ = 1, 10, 2 do
end"
`;

exports[`invalid usage variable destructuring: diagnostics 1`] = `"main.ts(6,18): error TSTL: Invalid @forRange call: destructuring cannot be used."`;
